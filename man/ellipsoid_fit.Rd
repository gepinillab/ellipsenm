% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ellipsoid_fit.R
\name{ellipsoid_fit}
\alias{ellipsoid_fit}
\title{Fit ellipsoids based on distinct methods}
\usage{
ellipsoid_fit(data, longitude, latitude, method = "mve1", level = 95,
  raster_layers = NULL)
}
\arguments{
\item{data}{data.frame or matrix of occurrence records. Columns must include
longitude and latitude. Other columns are optional and could values of
environmental variables to be used as dimensions for fitting the ellipsoid.}

\item{longitude}{(character) name of the column with longitude data.}

\item{latitude}{(character) name of the column with latitude data.}

\item{method}{(character) method to construct the ellipsoid that characterizes
the species ecological niche. Available methods are: "covmat", "mve1", and
"mve2". See details. Default = "mve1".}

\item{level}{(numeric) the confidence level of a pairwise confidence region
for the ellipsoid, expresed as percentage. Default = 95.}

\item{raster_layers}{optional RasterStack of environmental variables to be
extracted using geographic coordinates present in \code{data}.}
}
\value{

}
\description{
ellipsoid_fit helps in finding the centroid and matrix that
define an ellipsoid. It uses distinct methods with asumptions that differ
from each other.
}
\details{
Methods details are as follows:

"covmat"

"mve1"

"mve2"
}
\examples{
occurrences <- read.csv(system.file("extdata", "occurrences_comp.csv",
                                    package = "ellipsenm"))[, -1]

vars <- raster::stack(list.files(system.file("extdata", package = "ellipsenm"),
                                 pattern = "m_bio", full.names = TRUE))

ellips <- ellipsoid_fit(data = occurrences, longitude = "longitude",
                        latitude = "latitude", method = "mve1",
                        level = 95, raster_layers = vars)

# using only a matrix of data and no raster layers
data1 <- cbind(occurrences, raster::extract(ras, occurrences))

ell3 <- ellipsoid_fit(data1, longitude = "longitude", latitude = "latitude",
                      method = "mve1", level = 95)
}
