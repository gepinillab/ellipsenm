% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict_sim.R
\docType{methods}
\name{predict,ellipsoid-method}
\alias{predict,ellipsoid-method}
\title{Predict suitability derived from simple ellipsoid envelope models}
\usage{
\S4method{predict}{ellipsoid}(object, projection_variables,
  prediction = "suitability", return_numeric, tolerance = 1e-60,
  name = NULL, format, overwrite = FALSE, force_return = FALSE)
}
\arguments{
\item{object}{a fitted object of class ellipsoid or ellipsoid_model_sim.}

\item{projection_variables}{RasterStack or matrix of variables representing
environmental conditions of the scenario to which \code{object} will be
projected. See details.}

\item{prediction}{(character) type of prediction to be made, options are:
"suitability", "mahalanobis", and "both". Default = "suitability".}

\item{return_numeric}{(logical) whether or not to return values of mahalanobis
distance and suitability as part of the results (it depends on the type of
\code{prediction} selected). If \code{projection_variables} is a RasterStack,
default = FALSE, but can be changed to TRUE; if \code{projection_variables} is
a matrix, default = TRUE and cannot be changed. See details.}

\item{tolerance}{the tolerance for detecting linear dependencies.
Default = 1e-60.}

\item{name}{(character) optional, a name for the files to be writen. When
defined, raster predictions and numeric results are not returned as part of
the ellipsoid* object unless \code{force_return} = TRUE. File extensions will
be added as needed for writing raster and numeric results. Default = NULL.
See details.}

\item{format}{(charater) if \code{name} is defined, raster type to be written.
See \code{\link[raster]{writeFormats}} for details and options.}

\item{overwrite}{(logical) if \code{name} is defined, whether or not to
overwrite an exitent file with the exact same name. Default = FALSE.}

\item{force_return}{(logical) whether or not to force returning numeric and
raster results as part of the ellipsoid* object when \code{name} is defined.
Ignored if \code{projection_variables} is a matrix, when numeric results
will always be returned.}
}
\value{
An ellipsoid_model_sim with new predictions. If \code{name} is defined, csv
files with numeric results and raster files with the geographic predictions
will be written.
}
\description{
predicts suitability values based on mahalanobis distances
based on a centroid and a covariance matrix.
}
\details{
Argument \code{object} must be of one of the following classes: "ellipsoid"
or "ellipsoid_model_sim". The prefix "suitability" or "mahalanobis" will be
added to \code{name} depending on the type of prediction defined in
\code{prediction}. File type (extention) will be added to \code{name}, if
defined, .csv for numeric results and any of the ones described in
\code{\link[raster]{writeFormats}} depending on \code{format}.

Argument \code{projection_variables} variables can be defined either as a
RasterStack or as a matrix. If a matrix is given each column represents a
variable and predictions are returned only as numeric vectors. In both cases,
variable names must match exactly the order and name of variables used to
create \code{object}.

The only scenarios in which none of the numeric results will be returned are:
if \code{projection_variables} is a RasterStack and \code{return numeric} is
set as FALSE, and if \code{name} is defined and \code{force_return} is set as
FALSE, even if \code{return numeric} = TRUE.
}
\examples{
# reading data
occurrences <- read.csv(system.file("extdata", "occurrences.csv",
                                    package = "ellipsenm"))

# raster layers of environmental data
vars <- raster::stack(list.files(system.file("extdata", package = "ellipsenm"),
                                 pattern = "bio", full.names = TRUE))

# fitting a minimum volume ellipsoid
ellips1 <- ellipsoid_fit(data = occurrences, longitude = "longitude",
                         latitude = "latitude", method = "mve1",
                         level = 99, raster_layers = vars)

# predicting suitability (some slots will be empty if not required)
prediction <- predict(object = ellips1, projection_variables = vars,
                      prediction = "suitability")

class(prediction)

# predicting mahalanobis distance
prediction1 <- predict(object = ellips1, projection_variables = vars,
                       prediction = "mahalanobis")


# predicting both things
prediction2 <- predict(object = ellips1, projection_variables = vars,
                       prediction = "both")
}
